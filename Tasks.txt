Rough Timeline   | Tasks
----------------|----------------------------------------
February 12, 2024 | Pair Finalisation, Complete Code walk through
February 26, 2024 | Define class for data records
- Records have X (parameter) byte size and a Y (parameter) byte key field 
- Keys random order
March 11, 2024    | Add predicate evaluation to FilterIterator
March 25, 2024    | Add in-memory sorting, duplicate removal
April 8, 2024     | Add Plan & Iterator that verify a set of rows, Performance Testing and optimization
April 22, 2024    | Performance Testing and optimization
April 29, 2024    | Submission


Milestones :
...
Trace existing code
Disable (not remove!) excessive tracing output
Define class for data records
Add data records (incl mem mgmt) to iterators
Add data generation (random values) in ScanIterator
Test with simple plan -- scan only
Add predicate evaluation to FilterIterator
Test with moderate plan -- scan & filter
Add in-memory sorting -- eg 10, 100, 1000 rows
Add duplicate removal  -- eg. sort and eliminate duplicates
Test with moderate plan -- scan & sort
Add Plan & Iterator that verify a sort order
Test with 0 rows and with 1 row, also 2, 3, 7 rows
Add Plan & Iterator that verify a set of rows
Test with 0, 1, 2, 3, 10, 29, 100, 576, 1000 rows
...

50 mb, 125 mb, 12 gb, 120 gb

Couple args:
- c: # of records
- s: size of records
- o: output file (tracing output, latency, transfer time)

20 byte record as example

Latency:
- Time taken by algorithm to read from storage + storing
- Transfer time, time taken to transfer from one level to next

Submission:
- Link to Github repository (public/give access)
- Include README file, w/ main functions/techniques, and test case results

Generating/reading/writing data:
- NO character to split data (just continuous stream)